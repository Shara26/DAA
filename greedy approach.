Fractional Knapsack Problem using a greedy approach.

#include <iostream>
using namespace std;

int n;
int ncap;
int currWt = 0;
float currPr = 0;

float val[50];
float wt[50];
float r[50];

void Sorting(int k, float arr[50], float arr2[50], float arr3[50]) {
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < k - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swap(arr2[j], arr2[j + 1]);
                swap(arr3[j], arr3[j + 1]);
            }
        }
    }
}

void knapSack() {
    for (int i = 0; i < n; i++) {
        if (currWt + wt[i] <= ncap) {
            currWt += wt[i];
            currPr += val[i];
        } else {
            int remain = ncap - currWt;
            currPr += r[i] * remain;
            currWt = ncap;
            break;
        }
    }
    cout << "\nTotal Profit: " << currPr << endl;
}

int main() {
    cout << "\nEnter number of items: ";
    cin >> n;

    cout << "\nEnter Values: ";
    for (int i = 0; i < n; i++) {
        cout << "\nValue " << i + 1 << ": ";
        cin >> val[i];
    }

    cout << "\nEnter Weights: ";
    for (int i = 0; i < n; i++) {
        cout << "\nWeight " << i + 1 << ": ";
        cin >> wt[i];
    }

    cout << "\nEnter Knapsack Capacity: ";
    cin >> ncap;

  
    for (int i = 0; i < n; i++) {
        r[i] = (float)val[i] / wt[i];
    }

   
    Sorting(n, r, wt, val);

    cout << "\nRatios:\t";
    for (int i = 0; i < n; i++)
        cout << "\t" << r[i];

    cout << "\nValues:\t";
    for (int i = 0; i < n; i++)
        cout << "\t" << val[i];

    cout << "\nWeights:\t";
    for (int i = 0; i < n; i++)
        cout << "\t" << wt[i];

    knapSack();

    return 0;
}
/*Enter number of items: 4

Enter Values:
Value 1: 10

Value 2: 8

Value 3: 6

Value 4: 7

Enter Weights:
Weight 1: 10

Weight 2: 12

Weight 3: 13

Weight 4: 9

Enter Knapsack Capacity: 20

Ratios:         1       0.777778        0.666667        0.461538
Values:         10      7       8       6
Weights:                10      9       12      13
Total Profit: 17.6667
*/
