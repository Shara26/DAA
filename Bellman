#include <iostream>
#include <climits>
using namespace std;

int main()
{
 int V, E;
cout << "Enter number of vertices: ";
cin >> V;
cout << "Enter number of edges: ";
cin >> E;

 int u[100], v[100], w[100];
for (int i = 0; i < E; i++)
{
 cout << "Edge " << i + 1 << " (u v w): ";
  cin >> u[i] >> v[i] >> w[i];
 }

int source;
 cout << "Enter source vertex: ";
 cin >> source;

int dist[100];

 for (int i = 0; i < V; i++)
  dist[i] = INT_MAX;
 dist[source] = 0;
 
 for (int i = 1; i <= V - 1; i++)
{
 for (int j = 0; j < E; j++)
 {
 if (dist[u[j]] + w[j] < dist[v[j]])
 {
dist[v[j]] = dist[u[j]] + w[j];
 }
 }
 }

bool hasCycle = false;
 for (int j = 0; j < E; j++)
 {
 if (dist[u[j]] != INT_MAX && dist[u[j]] + w[j] < dist[v[j]])
{
hasCycle = true;
 break;
 }
 }

 if (hasCycle)
 {
  cout << "Graph contains a negative weight cycle.\n";
  
 }
else
{
 cout << "Graph does not contain any negative weight cycle.\n";
 cout << "Shortest distances from source " << source << ":\n";
  for (int i = 0; i < V; i++)
 {
 cout << "Vertex " << i << "-> ";
 if (dist[i] == INT_MAX)
cout << "Unreachable\n";
 else
cout << dist[i] << "\n";
   }
return 0;
}
}

/*
student@student:~$ g++ bellman.cpp
student@student:~$ ./a.out
Enter number of vertices: 4
Enter number of edges: 4
Edge 1 (u v w): 0
1
4
Edge 2 (u v w): 1
2
-6
Edge 3 (u v w): 2
3
5
Edge 4 (u v w): 3
1
-2
Enter source vertex: 0
Graph contains a negative weight cycle.

student@student:~$ g++ bellman.cpp
student@student:~$ ./a.out
Enter number of vertices: 5
Enter number of edges: 5
Edge 1 (u v w): 0
1
5
Edge 2 (u v w): 1
2
1
Edge 3 (u v w): 2
4
1
Edge 4 (u v w): 1
3
2
Edge 5 (u v w): 4
3
-1
Enter source vertex: 0
Graph does not contain any negative weight cycle.
Shortest distances from source 0:
Vertex 0-> 0
Vertex 1-> 5
Vertex 2-> 6
Vertex 3-> 6
Vertex 4-> 7
student@student:~$ 
*/
